# Reusable workflow
name: Deploy to Amazon ECS

on:
  workflow_call:
    inputs:
      ecs-cluster:
        type: string
        required: true
      ecs-service-api:
        type: string
        required: true
      ecs-task-definition-api:
        type: string
        required: true
      ecr-repository:
        type: string
        required: true
      image-tag:
        type: string
        required: true
      aws-region:
        type: string
        required: false
        default: us-west-2
      ecr-registry:
        type: string
        required: false
    secrets:
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true

env:
  AWS_REGION: ${{ inputs.aws-region }}
  CONTAINER_NAME: main
  ECR_REGISTRY: ${{ inputs.ecr-registry }}
  ECR_REPOSITORY: ${{ inputs.ecr-repository }}
  ECS_CLUSTER: ${{ inputs.ecs-cluster }}
  ECS_SERVICE_API: ${{ inputs.ecs-service-api }}
  ECS_TASK_DEFINITION_API: ${{ inputs.ecs-task-definition-api }}
  IMAGE_TAG: ${{ inputs.image-tag }}

defaults:
  run:
    shell: bash

jobs:
  build-image:
    name: Build and Deploy Image
    runs-on: ubuntu-latest
    outputs:
      task-definition-arn: ${{ steps.register-task-defn-api.outputs.task-definition-arn }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        # N.B. We specify a ref here to avoid the checkout action automatically merging with mainline.
        # ref: ${{ github.event.pull_request.head.sha || github.ref }}

      # https://evilmartians.com/chronicles/build-images-on-github-actions-with-docker-layer-caching#the-cache-dance-off
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
        with:
          install: true

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-multi-buildx

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: "no"

      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ inputs.ecr-registry }}
          username: ${{ secrets.aws-access-key-id }}
          password: ${{ secrets.aws-secret-access-key }}

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        run: |
          # Build a docker container and push it to ECR so that it can be deployed to ECS.
          # TODO reconsider most of these build args
          # docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest || true

          docker image build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
                       -f ./Dockerfile \
                       --load \
                       --progress plain \
                       .

          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      # TODO: make sure this works with multiple containers per task defn
      - name: Update API task definition with new image ID
        id: render-task-defn-api
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_API }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Register updated API task definition
        id: register-task-defn-api
        uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
        with:
          task-definition: ${{ steps.render-task-defn-api.outputs.task-definition }}

  deploy-api-service:
    needs: [build-image]
    name: Deploy api ECS service
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: "no"
        # It'd be nice to use aws-actions/amazon-ecs-deploy-task-definition but we
        # already _have_ our new task definition from an earlier step and it's
        # confusing to deploy extras for no reason (aws-actions gives you no way
        # to specify an existing task definition)
      - name: Deploy Amazon ECS API task definition
        env:
          TASK_DEFINITION_ARN: ${{ needs.build-image.outputs.task-definition-arn }}
        run: |
          echo "Task defn arn $TASK_DEFINITION_ARN"
          aws ecs update-service --cluster $ECS_CLUSTER \
                                 --service $ECS_SERVICE_API \
                                 --task-definition $TASK_DEFINITION_ARN

          aws ecs wait services-stable --services $ECS_SERVICE_API --cluster $ECS_CLUSTER
